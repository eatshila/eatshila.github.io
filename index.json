[{"categories":["Java后端"],"content":"yml的数据绑定需要使用@ConfigurationProperties注解进行绑定，然后在使用的时候可以使用@Autowired自动注入。 使用Interceptor可以实现登录鉴权功能，首先写一个LoginInterceptor类实现HandlerInterceptor类，实现preHandler方法，在此方法中进行鉴权操作，在写一个LoginConfiguration类实现WebMvcConfigure类，实现addInterceptor方法，在这个方法中配置拦截规则，给这个类添加一个@configuration注解，自动注入配置，一个简单的鉴权拦截功能就完成了，后面再写一个controller进行登录操作，自此，一个简单的登录鉴权的功能就完成了。 下面是代码 config/LoginConfiguration.java @Configuration public class LoginConfiguration implements WebMvcConfigurer { @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new LoginInterceptor()).addPathPatterns(\"/\"); } } config/LoginInterceptor.java public class LoginInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { User user = (User) request.getSession().getAttribute(\"USER\"); if (user == null){ response.sendError(403,\"权限不足\"); // response.setStatus(403); return false; } return true; } } controller/LoginController.java @RestController public class LoginController { @Autowired private User user; @PostMapping(\"/login\") public ResBean login(HttpServletRequest req, @RequestBody LoginParam loginParam){ if(loginParam.getUsername().equals(user.getUsername())\u0026\u0026loginParam.getPassword().equals(user.getPassword())){ req.getSession().setAttribute(\"USER\",new User() .setUsername(loginParam.getUsername()) .setPassword(loginParam.getPassword()) .setPermission(1) .setDesc(\"普通用户\") ); return new ResBean(\"登录成功\",200,null); }else{ return new ResBean(\"登录失败，用户名或者密码错误\",200,null); } } } controller/HelloController.java @RestController public class HelloController { @GetMapping(\"/\") public String HelloWorld(){ return \"Hello World\"; } } pojo/LoginParam.java @Data @NoArgsConstructor @AllArgsConstructor @Accessors(chain = true) public class LoginParam { private String username; private String password; } 此处使用了Lombok插件 pojo/User.java @Component @Data @AllArgsConstructor @NoArgsConstructor @Accessors(chain = true) @ConfigurationProperties(prefix = \"user1\") public class User { private String username; private String password; private int permission; private String desc; } utils/ResBean.java @Data @AllArgsConstructor @NoArgsConstructor @Accessors(chain = true) public class ResBean { private String msg; private int code; private Object obj; } application.yml user1:username:chenyipassword:pwd123456permission:1desc:普通用户 ","date":"2022-02-15","objectID":"/springboot%E5%9F%BA%E7%A1%80-%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%99%BB%E5%BD%95/:0:0","tags":["springboot"],"title":"Springboot基础 实现简单的登录","uri":"/springboot%E5%9F%BA%E7%A1%80-%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%99%BB%E5%BD%95/"},{"categories":["前端"],"content":"在vue中使用高德地图api ​ 1 创建项目 vue init webpack gaode-demo #vue2 版本 ​ 2 安装依赖 #安装高德官方的loader:amap-jsapi-loader npm i @amap/amap-jsapi-loader --save ​ 3 编写HelloWorld ​ 创建一个容器 \u003ctemplate\u003e \u003cdiv id=\"container\"\u003e\u003c/div\u003e \u003c/template\u003e //导入包 import AMapLoader from '@amap/amap-jsapi-loader'; //在data中声明map对象 data(){ return{ map:null, } }, //在methods中添加方法 initMap(){ AMapLoader.load({ key:\"\", // 申请好的Web端开发者Key，首次调用 load 时必填 version:\"2.0\", // 指定要加载的 JSAPI 的版本，缺省时默认为 1.4.15 plugins:[''], // 需要使用的的插件列表，如比例尺'AMap.Scale'等 }).then((AMap)=\u003e{ this.map = new AMap.Map(\"container\",{ //设置地图容器id viewMode:\"3D\", //是否为3D地图模式 zoom:5, //初始化地图级别 center:[105.602725,37.076636], //初始化地图中心点位置 }); }).catch(e=\u003e{ console.log(e); }) }, // mounted(){ //DOM初始化完成进行地图初始化 this.initMap(); } ​ 4 run npm run dev ","date":"2022-02-15","objectID":"/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEapi/:0:0","tags":["vue","前端"],"title":"在vue中使用高德地图api","uri":"/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BEapi/"},{"categories":["其他"],"content":"网页测试 方便测试使用 ","date":"2022-02-15","objectID":"/%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E7%BD%91%E9%A1%B5/:0:0","tags":["test"],"title":"一个测试网页","uri":"/%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E7%BD%91%E9%A1%B5/"},{"categories":null,"content":"关于 ","date":"2022-02-15","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"一个简单的blog ","date":"2022-02-15","objectID":"/about/:1:1","tags":null,"title":"About","uri":"/about/"}]